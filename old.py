import requests
import json

from os import abort
from flask import Flask, request
from pymemcache.client import base
from datetime import datetime
from requests.auth import HTTPBasicAuth
from bot.bot import Bot
from bot.handler import MessageHandler, BotButtonCommandHandler
#============================Class===========================================

TOKEN = "001.4085375959.2023817724:1003728479"  # your token here
botmyteam = Bot(token=TOKEN)

class whatsapp_class():

    '''
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API GreenAPI –¥–ª—è Whatsapp
    –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è —á—Ç–æ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ webhook
    '''
    idInstance = ""
    apiTokenInstance = ""
    headers = {
        'Content-Type': 'application/json'
    }
    client = base.Client(('localhost', 11211))
    stage2_repeate_yes = ["–¥–∞", "lf", "1"]
    stage2_repeate_no = ["–Ω–µ—Ç", "ytn", "2"]
    numbers_emoji = {"0": "0Ô∏è‚É£", "1": "1Ô∏è‚É£", "2": "2Ô∏è‚É£", "3": "3Ô∏è‚É£", "4": "4Ô∏è‚É£", "5": "5Ô∏è‚É£", "6": "6Ô∏è‚É£", "7": "7Ô∏è‚É£", "8": "8Ô∏è‚É£", "9": "9Ô∏è‚É£"}
    def __doc__(self):
        pass
    def __init__(self, idInstance, apiTokenInstance):
        '''
        –ü—Ä–∏ —Å–æ–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        :param idInstance: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É GreenApi(19120)
        :param apiTokenInstance: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É GreenApi(c2d8f72b763ed94d6159e877ef852cd61752be8f0530ae0f77)
        '''
        self.idInstance = idInstance
        self.apiTokenInstance = apiTokenInstance

    def work_schedule(self):
        rab_time = ["8", "21"]
        if int(rab_time[0]) <= int(datetime.now().hour) and int(datetime.now().hour) <= int(rab_time[1]):
            # print("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!")
            return True
        else:
            # print("–ù–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!")
            return False

    def oneCapi(self, phonnuber):
        '''
        –§—É–Ω–∫—Ü–∏—è
        :param phonnuber: –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç json c –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ, –ª–∏–±–æ —Å –æ—à–∏–±–∫–æ–π
        '''
        if self.client.get(str(request.json['senderData']['chatId']+"_json")) is None:
            auth = HTTPBasicAuth('myteam', '777777')
            url = 'http://192.168.125.62:8088/trade_razrab4/hs/atczak/getdatetimechat/' + phonnuber + ''
            resp = requests.get(url=url, auth=auth)
            content = resp.json()
            self.client.set(str(request.json['senderData']['chatId'] + "_json"),
                            json.dumps(content).encode(
                                'UTF-8'), 60)
            return content
        else:
            return json.loads(self.client.get(str(request.json['senderData']['chatId']+"_json")).decode('UTF-8'))

    def new_order(self, request):
        resp = requests.post(url='https://botapi.777-777.org/v1/neworder',
                             headers={'Authorization': 'RCh6tsWymuuGP7VZh3HYsNWLwckMVnVn'},
                             json=users_data[str(request.json["senderData"]["chatId"])]['new_order'])
        return resp

    def phone(self, phone):
        phone = phone.replace('@c.us', '')
        if len(phone) == 12:
            phone = phone[2:]
        elif len(phone) == 11:
            phone = phone[1:]
        return phone

    def greeting_generator(self):
        if 5 <= int(datetime.now().hour) <= 10:
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
        elif 11 <= int(datetime.now().hour) <= 17:
            greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
        elif 18 <= int(datetime.now().hour) <= 21:
            greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
        elif 22 <= int(datetime.now().hour) <= 23 or 0 <= int(datetime.now().hour) <= 4:
            greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
        return greeting

    def repeat_order_message(self, text):
        if text == "1":
            return True
        else:
            return False

    def controller(self, request):
        if request.json['typeWebhook'] == 'incomingMessageReceived' and (self.client.get(str(request.json['senderData']['chatId']) + '_manager') is not None or self.client.get(str(request.json['senderData']['chatId']) + '_manager') == True):
        #if self.client.get(str(request.json['senderData']['chatId']) + '_manager') == b'True':
            '''
            –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç—É
            '''
            print("–ü–µ—Ä–µ–≤–æ–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!")
            print(self.client.get(str(request.json['senderData']['chatId']) + "_vkteams_manager_uid"))
            botmyteam.send_text(chat_id=self.client.get(str(request.json['senderData']['chatId'])+'_vkteams_manager_uid'),
                                text=str(request.json['senderData']['chatId'])+": "+str(request.json['messageData']['textMessageData']['textMessage']),
                                inline_keyboard_markup="{}".format(json.dumps([
                                    [
                                        {"text": "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", "callbackData": "history_messages", "style": "primary"},
                                        {"text": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "callbackData": "close_dialog", "style": "primary"}
                                    ]
                                ])))

        else:
            if request.json['typeWebhook'] == 'incomingMessageReceived':
                self.incomingMessageReceived(request)

    def editing_time(self, time_editer):
        temp = time_editer.split()
        time_editer = "c " + str(datetime.strptime(temp[0], '%Y-%m-%dT%H:%M:%S').hour) + " –¥–æ " + str(
            datetime.strptime(temp[1], '%Y-%m-%dT%H:%M:%S').hour)
        return time_editer

    def mounth(self, mounth):
        array_mounth = [
            '—è–Ω–≤–∞—Ä—è',
            '—Ñ–µ–≤—Ä–∞–ª—è',
            '–º–∞—Ä—Ç–∞',
            '–∞–ø—Ä–µ–ª—è',
            '–º–∞—è',
            '–∏—é–Ω—è',
            '–∏—é–ª—è',
            '–∞–≤–≥—É—Å—Ç–∞',
            '—Å–µ–Ω—Ç—è–±—Ä—è',
            '–æ–∫—Ç—è–±—Ä—è',
            '–Ω–æ—è–±—Ä—è',
            '–¥–µ–∫–∞–±—Ä—è'
        ]
        return array_mounth[mounth - 1]

    def nomenklature(self):
        #print(self.oneCapi(self.phone(request.json['senderData']['chatId'])))
        nomenklature = ""
        for i in self.oneCapi(self.phone(request.json['senderData']['chatId']))[2]:
            #print(i["nomenclature"]+" "+str(i["quantity"]))
            nomenklature = nomenklature+i["nomenclature"]+" "+str(i["quantity"])+'—à—Ç.\\n'
            nomenklature = nomenklature.replace('"', ' \'')
        return nomenklature

    def incomingMessageReceived(self, request):
        #print("–í–≤–æ–¥–Ω—ã–µ:")
        #print(self.client.get(str(request.json['senderData']['chatId']+"_jivo")))
        #print(request.json['messageData']['textMessageData']['textMessage'])
        #print(self.client.get(str(request.json['senderData']['chatId'])+'_stage').decode('UTF-8'))
        #bot.sendmessagetext(request.json['senderData']['chatId'],request.json['messageData']['textMessageData']['textMessage'])
        if not(self.client.get(str(request.json['senderData']['chatId'])+"_jivo") is None) or self.client.get(str(request.json['senderData']['chatId']+"_jivo")) == True:
            if int(self.client.get(str(request.json['senderData']['chatId']+"_jivo"))) == 1:
                #managers = ['stilet@777-777.org']
                #jivosite.sendmessage(str(request.json['senderData']['chatId']), text=str(request.json['messageData']['textMessageData']['textMessage']))
                #https://myteam.mail.ru/bot/v1/messages/sendText?token=001.3537475893.1318737291:750764880&chatId=stilet@777-777.org&text=1

                #for item in managers:
                    #requests.get('https://myteam.mail.ru/bot/v1/messages/sendText?token=001.3537475893.1318737291:750764880&chatId='+ item +'&text=' + "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + str(request.json['senderData']['chatId']) + ":\n" + str(request.json['messageData']['textMessageData']['textMessage']) + '')

                botmyteam.send_text(chat_id='AoLHu9Bd1_KuLooKQAQ', text="–ö–ª–∏–µ–Ω—Ç—É "+str(request.json['senderData']['chatId'])+" –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!", inline_keyboard_markup="{}".format(json.dumps([
                                                     [
                                                      {"text": "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "callbackData": "take_to_work", "style": "primary"}
                                                     ]
                                                        ])))
                pass
        else:
            if self.client.get(str(request.json['senderData']['chatId'])) is None:
                '''
                –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —Å –∏–¥ —á–∞—Ç–∞ –≤ –º—ç–º–∫—ç—à, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è –±—ã–ª–æ –±–æ–ª–µ–µ 12 –Ω–∞–∑–∞–¥, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                '''
                print("–°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã –≤ memcashed!")
                self.client.set(str(request.json['senderData']['chatId']), True, 43200) #—Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —Å –∏–¥ —á–∞—Ç–∞ , –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 12 —á–∞—Å–æ–≤
                bot.sendmessagetext(request.json['senderData']['chatId'],
                                    ''+self.greeting_generator()+'\\n'
                                    '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞üë©üèº‚Äçüíº, —è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–∏–µ–º—É *–∑–∞–∫–∞–∑–æ–≤ –≤–æ–¥—ã ¬´–õ–µ–≥–µ–Ω–¥–∞ –∂–∏–∑–Ω–∏¬ª*\\n' 
                                    '–î–ª—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è, —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é\\n'
                                    'üëâüèª–ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ü–∏—Ñ—Ä—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É:\\n\\n'
                                    ''+str(self.numbers_emoji["1"])+' - üîÅ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑\\n'
                                    ''+str(self.numbers_emoji["2"])+' - üíô–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ \\n'
                                    ''+str(self.numbers_emoji["3"])+' - üôå—É–∑–Ω–∞—Ç—å –æ –±–æ–Ω—É—Å–∞—Ö –∑–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑—ã\\n'
                                    ''+str(self.numbers_emoji["4"])+' - üôé‚Äç‚ôÄÔ∏è–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º')
                self.client.set(str(request.json['senderData']['chatId'])+'_stage', 1, 90) # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ 1 —ç—Ç–∞–ø
                self.client.set(str(request.json['senderData']['chatId']) + '_stage_marker', True, 1000)
            else:
                '''
                –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ–º –ø–æ–º–æ—á—å?
                '''
                #print(self.client.get(str(request.json['senderData']['chatId']) + '_stage'))
                if self.client.get(str(request.json['senderData']['chatId']) + '_stage') is None and self.client.get(str(request.json['senderData']['chatId']) + '_stage_marker') == b'True':
                    bot.sendmessagetext(request.json['senderData']['chatId'], "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–æ!")
                    self.client.set(str(request.json['senderData']['chatId']) + '_stage_marker', False, 10)
                if self.client.get(str(request.json['senderData']['chatId']) + '_stage') is None:
                    bot.sendmessagetext(request.json['senderData']['chatId'], "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\\n\\n"
                                                                              ""+str(self.numbers_emoji["1"])+" - üîÅ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑\\n"
                                                                              ""+str(self.numbers_emoji["2"])+" - üíô–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ \\n"
                                                                              ""+str(self.numbers_emoji["3"])+" - üôå—É–∑–Ω–∞—Ç—å –æ –±–æ–Ω—É—Å–∞—Ö –∑–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑—ã\\n"
                                                                              ""+str(self.numbers_emoji["4"])+" - üôé‚Äç‚ôÄÔ∏è–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
                    self.client.set(str(request.json['senderData']['chatId']) + '_stage', 1, 90) # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ 1 —ç—Ç–∞–ø
                    self.client.set(str(request.json['senderData']['chatId']) + '_stage_marker', True, 1000)
                else:
                    if (self.client.get(str(request.json['senderData']['chatId'])+'_stage')).decode('UTF-8') == '1' and \
                            (self.repeat_order_message(request.json['messageData']['textMessageData']['textMessage'])) == True and\
                            request.json['messageData']['textMessageData']['textMessage'] == '1':
                        resp = self.oneCapi(self.phone(request.json['senderData']['chatId']))
                        '''
                        –ï—Å–ª–∏ 1 —ç—Ç–∞–ø –∏ –≤—ã–±—Ä–∞–Ω 1 –ø—É–Ω–∫—Ç –º–µ–Ω—é
                        '''
                        if not ("error" in resp):
                            '''
                            –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API 1–°, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
                            '''
                            message_temp = "–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –í—ã –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏:\\n"+self.nomenklature()+"\\n –ü–æ–≤—Ç–æ—Ä–∏–º –∑–∞–∫–∞–∑?\\n\\n "+str(self.numbers_emoji["1"])+" - –î–∞\\n "+str(self.numbers_emoji["2"])+" - –ù–µ—Ç"
                            bot.sendmessagetext(request.json['senderData']['chatId'], message_temp)
                            self.client.set(str(request.json['senderData']['chatId']) + '_stage', 2,
                                            90)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ 2 —ç—Ç–∞–ø
                        else:
                            print("–ï—Å—Ç—å –æ—à–∏–±–∫–∏")
                            if resp["error"] in ["–ù–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ë–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –≥–ª–∞–≤–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º", "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º", "–ù–µ—Ç –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º", "–ë–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–í –∞–¥—Ä–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"]:
                                print(resp["error"])
                                bot.sendmessagetext(request.json['senderData']['chatId'],
                                                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ—É–Ω–∫—Ü–∏–∏ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑¬ª.\\n" 
                                                    "–ü—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã.\\n"
                                                    "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –≤–æ–¥—ã:\\n"
                                                    "- –§–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ / –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\\n"
                                                    "- –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\\n")
                                self.client.set(str(request.json['senderData']['chatId']) + "_jivo", 1)

                            elif resp["error"] in ["–£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞", "–£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏—è–º", "–£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏—è–º"]:
                                print(resp["error"])
                                if self.work_schedule() == True:
                                    bot.sendmessagetext(request.json['senderData']['chatId'],   "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\\n"
                                                                                                "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –í–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ  2 –º–∏–Ω—É—Ç.\\n"
                                                                                                "–ß—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\\n"
                                                                                                " https://777-777.org\\n")
                                    self.client.set(str(request.json['senderData']['chatId']) + "_jivo", 1)
                                    botmyteam.send_text(chat_id='AoLHu9Bd1_KuLooKQAQ', text="–ö–ª–∏–µ–Ω—Ç—É " + str(
                                        request.json['senderData']['chatId']) + " –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!",
                                                        inline_keyboard_markup="{}".format(json.dumps([
                                                            [
                                                                {"text": "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                                                 "callbackData": "take_to_work", "style": "primary"}
                                                            ]
                                                        ])))

                                    #self.client.set(str(request.json['senderData']['chatId']) + '_manager', True)
                                elif self.work_schedule() == False:
                                    bot.sendmessagetext(request.json['senderData']['chatId'],
                                                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\\n"
                                                        "–ü–µ—Ä–µ–¥–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –∑–∞–≤—Ç—Ä–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. \\n"
                                                        "–ß—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\\n"
                                                        " https://777-777.org\\n")
                                    self.client.set(str(request.json['senderData']['chatId']) + '_manager', True)
                                    botmyteam.send_text(chat_id='AoLHu9Bd1_KuLooKQAQ', text="–ö–ª–∏–µ–Ω—Ç—É " + str(
                                        request.json['senderData']['chatId']) + " –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!",
                                                        inline_keyboard_markup="{}".format(json.dumps([
                                                            [
                                                                {"text": "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                                                 "callbackData": "take_to_work", "style": "primary"}
                                                            ]
                                                        ])))
                            else:
                                pass
                    elif str(request.json['messageData']['textMessageData']['textMessage']) == '2' and (self.client.get(str(request.json['senderData']['chatId'])+'_stage')).decode('UTF-8') == '1':

                        #elf.client.set(str(request.json['senderData']['chatId']) + '_manager_reason', "–•–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑")
                        if self.work_schedule() == True:
                            #—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
                            self.sendmessagetext(request.json['senderData']['chatId'], "–£—Ö —Ç—ã, –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!\\n"
                                                                                        "–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–º–µ—é—Ç –¥–µ–ª–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ!\\n\\n"
                                                                                        "–ü–µ—Ä–µ–≤–æ–∂—É –í–∞—Å –Ω–∞ —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º) \\n"
                                                                                        "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ, –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç.\\n"
                                                                                        "–ê —è –ø—Ä–æ—â–∞—é—Å—å —Å –í–∞–º–∏, –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!")
                            self.client.set(str(request.json['senderData']['chatId']) + '_manager', True)
                            botmyteam.send_text(chat_id='AoLHu9Bd1_KuLooKQAQ', text="–ö–ª–∏–µ–Ω—Ç " + str(
                                request.json['senderData']['chatId']) + " —Ö–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑",
                                                inline_keyboard_markup="{}".format(json.dumps([
                                                    [
                                                        {"text": "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "callbackData": "take_to_work",
                                                         "style": "primary"}
                                                    ]
                                                ])))
                        elif self.work_schedule() == False:
                            # –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
                            pass
                        pass

                    elif str(request.json['messageData']['textMessageData']['textMessage']) == '3' and (
                    self.client.get(str(request.json['senderData']['chatId']) + '_stage')).decode('UTF-8') == '1':
                        '''
                        —É–∑–Ω–∞—Ç—å –æ –±–æ–Ω—É—Å–∞—Ö –∑–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑—ã
                        '''
                        pass

                    elif str(request.json['messageData']['textMessageData']['textMessage']) == '4' and (
                    self.client.get(str(request.json['senderData']['chatId']) + '_stage')).decode('UTF-8') == '1':
                        '''
                       –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                        '''
                        self.client.set(str(request.json['senderData']['chatId']) + '_manager', True)
                        botmyteam.send_text(chat_id='AoLHu9Bd1_KuLooKQAQ', text="–ö–ª–∏–µ–Ω—Ç " + str(
                            request.json['senderData']['chatId']) + " —Ö–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑",
                                            inline_keyboard_markup="{}".format(json.dumps([
                                                [
                                                    {"text": "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "callbackData": "take_to_work",
                                                     "style": "primary"}
                                                ]
                                            ])))
                        pass

                    elif (self.client.get(str(request.json['senderData']['chatId'])+'_stage')).decode('UTF-8') == '2':
                        if (request.json['messageData']['textMessageData']['textMessage']) in self.stage2_repeate_yes:
                            self.client.set(str(request.json['senderData']['chatId']) + '_new_make_order_json', "{ ")
                            i = ''
                            number = 1
                            date_delivery = ""
                            date = {}
                            for item in self.oneCapi(self.phone(request.json['senderData']['chatId']))[1]:
                                if i != item['date']:
                                    date_delivery = date_delivery + str(self.numbers_emoji[str(number)]) + " - " + (str(datetime.strptime(item['date'], '%Y-%m-%dT%H:%M:%S').day)+" "+str(self.mounth(datetime.strptime(item['date'], '%Y-%m-%dT%H:%M:%S').month))) + '\\n'
                                    date[str(number)] = item['date']
                                    number = number + 1
                                i = item['date']

                            print(type(date))
                            self.client.set(str(request.json['senderData']['chatId']) + '_date_delyveri', date)
                            bot.sendmessagetext(request.json['senderData']['chatId'], '–ú—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –¥–æ—Å—Ç–∞–≤–∏—Ç—å ¬´–õ–µ–≥–µ–Ω–¥—É¬ª –ø–æ –∞–¥—Ä–µ—Å—É \\n'
                                                                                      ' '+self.oneCapi(self.phone(request.json['senderData']['chatId']))[0]['address']+'\\n'
                                                                                      '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:\\n\\n'
                                                                                      ''+ date_delivery +'')
                            self.client.set(str(request.json['senderData']['chatId']) + '_stage', 3,
                                            90)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ 3 —ç—Ç–∞–ø
                        elif (request.json['messageData']['textMessageData']['textMessage']) in self.stage2_repeate_no:
                            bot.sendmessagetext(request.json['senderData']['chatId'],
                                                ' –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\\n' 
                                                '–ó–∞—á–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ!\\n'
                                                '–®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑! –ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ?!\\n'
                                                'https://777-777.org \\n'
                                                '–û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–∞–π—Ç–µ,'
                                                '–∏–ª–∏ –ø–∏—à–∏—Ç–µ –º–Ω–µ) \\n –° –í–∞–º–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!')
                            self.client.set(str(request.json['senderData']['chatId']) + '_stage', 0,
                                            90)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ 3 —ç—Ç–∞–ø
                    elif (self.client.get(str(request.json['senderData']['chatId']) + '_stage')).decode('UTF-8') == '3':
                        #print(request.json['messageData']['textMessageData']['textMessage'])
                        #print(self.client.get(str(request.json['senderData']['chatId']) + '_date_delyveri').decode('UTF-8'))
                        #print(self.oneCapi(self.phone(request.json['senderData']['chatId'])))
                        #print(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_date_delyveri').decode('utf-8').replace("'", "\""))["1"])
                        self.client.append(str(request.json['senderData']['chatId']) + '_new_make_order_json', '\"date\": \"' + str(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_date_delyveri').decode('utf-8').replace("'", "\""))["1"]) + '\" }')
                        #print(self.client.get(str(request.json['senderData']['chatId']) + '_new_make_order_json'))
                        #print(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_date_delyveri').decode('utf-8').replace("'", "\"")))
                        number = 1
                        time_delivery = ""
                        timeFrom = {}
                        timeBy = {}
                        print(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_date_delyveri').decode('utf-8').replace("'", "\""))[request.json['messageData']['textMessageData']['textMessage']])
                        for item in self.oneCapi(self.phone(request.json['senderData']['chatId']))[1]:
                            if item["date"] == json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_date_delyveri').decode('utf-8').replace("'", "\""))[request.json['messageData']['textMessageData']['textMessage']]:
                                print(item["dateFrom"])
                                time_delivery = time_delivery + str(self.numbers_emoji[str(number)]) + " - C " + (str(datetime.strptime(item['dateFrom'], '%Y-%m-%dT%H:%M:%S').hour) + " –¥–æ " + str(datetime.strptime(item['dateBy'], '%Y-%m-%dT%H:%M:%S').hour)) + '\\n'
                                timeFrom[str(number)] = item['dateFrom']
                                timeBy[str(number)] = item['dateBy']
                            number = number + 1
                        self.client.set(str(request.json['senderData']['chatId']) + '_timeFrom', timeFrom)
                        self.client.set(str(request.json['senderData']['chatId']) + '_timeBy', timeBy)
                        bot.sendmessagetext(request.json['senderData']['chatId'],
                                            '–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ?\\n\\n'
                                            '' + time_delivery + '')
                        self.client.set(str(request.json['senderData']['chatId']) + '_stage', 4,
                                        90)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ 3 —ç—Ç–∞–ø
                        self.client.delete(str(request.json['senderData']['chatId']) + '_date_delyveri')
                    elif (self.client.get(str(request.json['senderData']['chatId']) + '_stage')).decode('UTF-8') == '4':

                        #print(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_timeFrom').decode('utf-8').replace("'", "\""))[request.json['messageData']['textMessageData']['textMessage']])
                        #print(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_new_make_order_json').decode('utf-8'))["date"])
                        #print(self.oneCapi(self.phone(request.json['senderData']['chatId']))[3])
                        # http://192.168.125.62:8088/trade_razrab4/hs/atczak/makeorderchat/00-00015798/2022-05-18T00:00:00/2022-05-18T17:01:00/2022-05-18T19:00:00
                        print(self.client.get(str(request.json['senderData']['chatId']) + '_make_order'))
                        if self.client.get(str(request.json['senderData']['chatId']) + '_make_order') == b'True':
                            bot.sendmessagetext(request.json['senderData']['chatId'], "–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑, –æ–∂–∏–¥–∞–π—Ç–µ")
                        elif self.client.get(str(request.json['senderData']['chatId']) + '_make_order') == b'success':
                            bot.sendmessagetext(request.json['senderData']['chatId'], "–£–∂–µ –µ—Å—Ç—å –∑–∞–∫–∞–∑")
                        else:
                            self.client.set(str(request.json['senderData']['chatId']) + '_make_order', True, 43200)
                            auth = HTTPBasicAuth('myteam', '777777')
                            url = "http://192.168.125.62:8088/trade_razrab4/hs/atczak/makeorderchat/"+ str(self.oneCapi(self.phone(request.json['senderData']['chatId']))[3]["kodpartner"]).replace(' ', '') + "/" \
                                    "" + str(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_new_make_order_json').decode('utf-8'))["date"])+"/" \
                                  "" + str(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_timeFrom').decode('utf-8').replace("'", "\""))[request.json['messageData']['textMessageData']['textMessage']]) + "/" \
                                        "" + str(json.loads(self.client.get(str(request.json['senderData']['chatId']) + '_timeBy').decode('utf-8').replace("'", "\""))[request.json['messageData']['textMessageData']['textMessage']])
                            #print(url)
                            resp = requests.get(url=url, auth=auth)
                            #print(resp.json())
                            print(json.loads(json.dumps(resp.json()))[1]['success'])
                            if 'success' in json.loads(json.dumps(resp.json()))[1]:
                                self.client.set(str(request.json['senderData']['chatId']) + '_make_order', 'success', 43200)
                                nomenclature = ""
                                price =0
                                for item in json.loads(json.dumps(resp.json()))[0]:
                                    print(item)
                                    nomenclature = nomenclature + str(item['nomenclature']).replace('"', ' \'') + " " + str(item['quantity']) + "\\n"
                                    price = price + item['price']
                                    form_of_payment = item['form_of_payment']

                                print(nomenclature)
                                print(price)
                                print(form_of_payment)
                                message = "–î–æ—Å—Ç–∞–≤–∏–º \\n" + str(nomenclature) + "—à—Ç. \\n—Å—É–º–º–∞: " + str(price) + " —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã " + str(form_of_payment)
                                print(message)
                                bot.sendmessagetext(request.json['senderData']['chatId'], "–î–æ—Å—Ç–∞–≤–∏–º \\n" + str(nomenclature) + "—Å—É–º–º–∞: " + str(price) + " —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã " + str(form_of_payment))
                                #bot.sendmessagetext(str(request.json['senderData']['chatId']), str())
                                self.client.set(str(request.json['senderData']['chatId']) + '_stage_marker', False, 10)
                            else:
                                return "ok"
                            #print(json.dumps(resp.json())[1])

                            pass


    def outgoingMessageReceived(self, request):
        pass

    def outgoingMessageStatus(self, request):
        pass

    def stateInstanceChanged(self, request):
        pass

    def statusInstanceChanged(self, request):
        pass

    def deviceInfo(self, request):
        pass

    def incomingCall(self, request):
        pass

    def url_generation(self, metod):
        url = "https://api.green-api.com/waInstance"+self.idInstance+"/"+metod+"/"+self.apiTokenInstance+""
        return url

    def sendmessagetext(self, chatId, message):
        print("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É!")
        payload = ("{\r\n\t\"chatId\": \""+str(chatId)+"\",\r\n\t\"message\": \""+str(message)+"\"\r\n}").encode('utf8')
        response = requests.request("POST", self.url_generation("SendMessage"), headers=self.headers, data=payload)
        print(response.json())
        return response

    def get_an_avatar(self, id):
        payload = ('{"chatId": "'+id+'"}').encode('utf8')
        response = requests.request("POST", self.url_generation("GetAvatar"), headers=self.headers, data=payload)
        return response

class jivosite():
    url = ""
    def __init__(self, url):
        self.url = url

    def new_chat(self, id):
        '''
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∂–∏–≤–æ—Å–∞–π—Ç, –≤ –Ω–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π
        –¥–∏–∞–ª–æ–≥ —Å —Ä–æ–±–æ—Ç–æ–º
        :return:
        '''
        message = []
        payload = {}
        headers = {}

        response_outgoing = requests.request("GET",
                                             "https://api.green-api.com/waInstance10353/lastOutgoingMessages/e8ba72e6615f9b238f1d46ffb8a6085e63c24c18c5224ab490",
                                             headers=headers, data=payload)
        response_incoming = requests.request("GET",
                                             "https://api.green-api.com/waInstance10353/lastIncomingMessages/e8ba72e6615f9b238f1d46ffb8a6085e63c24c18c5224ab490",
                                             headers=headers, data=payload)

        for i in response_outgoing.json():
            if i["chatId"] == id and i["typeMessage"] == "textMessage":
                # print(i["textMessage"])
                message.append(
                    {"type": i["type"], "timestamp": i["timestamp"], "textMessage": i["textMessage"]}
                )

        for item in response_incoming.json():
            if item["chatId"] == id and item["typeMessage"] == "textMessage":
                # print(item["textMessage"])
                message.append(
                    {"type": item["type"], "timestamp": item["timestamp"], "textMessage": item["textMessage"]}
                )
        timemessage = []
        for i in message:
            timemessage.append(i["timestamp"])
        timemessage.sort()
        text = []
        for i in timemessage:
            for item in message:
                if item['timestamp'] == i:
                    if item["type"] == "incoming":
                        #print("\033[31m {}".format(item["textMessage"]))
                        text.append(item["textMessage"])
                    else:
                        #print("\033[34m {}".format(item["textMessage"]))
                        text.append(item["textMessage"])
        print(text)
        self.sendmessage(id, text=text)

    def sendmessage(self, id, name=None, photo=None, phone=None, email=None, invite=None, text=None):
        '''
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Jivosite
        :param id:
        :param name:
        :param photo:
        :param phone:
        :param email:
        :param invite:
        :param text:
        :return:
        '''
        payload = ('{"sender" :{"id":"'+id+'", "name":"'+name+'", "photo":"'+photo+'", "phone":"'+phone+'", "email":"'+email+'", "invite" : "'+invite+'"},"message" :{ "type" : "text","id": "customer_message_id","text" : "'+text+'" } }').encode('utf8')
        headers = {
            'Content-Type': 'application/json'
        }
        response = requests.request("POST", self.url, headers=headers, data=payload)
        return response



jivo = jivosite('https://joint.jivosite.com/IF6YK0nYgC56npYB/HQhStQV1oY')
bot = whatsapp_class("10353", "e8ba72e6615f9b238f1d46ffb8a6085e63c24c18c5224ab490")

app = Flask(__name__)

@app.route('/', methods=['POST'])
def hello():
    if not request.json:
        abort(400)
    else:
        if request.headers['Authorization'][7:] == "#yT4<kXRiPAeTp%5()suuqSGWbfyUf6k": #–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            #print(request.json)
            bot.controller(request) # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –∫–æ–Ω—Ä–æ–ª–ª–µ—Ä
            return "200"
        else:
            return "–ù–µ —É–≥–∞–¥–∞–ª", 440

@app.route('/jivo', methods=['POST'])
def hello1():
    if not request.json:
        abort(400)
    else:
        print(request.json)
        return "200"

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=9003)
